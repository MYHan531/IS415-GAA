---
title: "Take-Home Exercise 2: Geospatial Analytics for Social Good - Thailand Drug Abuse Case Study"
title-block-banner: true
author: "Your Name"
date: 2024-10-08
date-modified: "last-modified"
format:
  html:
    toc: true
    toc-depth: 3
    toc-location: right
    number-sections: true
    number-depth: 3
    code-copy: true
    embed-resources: true
    lightbox: true
    lang: en
abstract: |
  In this exercise, we apply geospatial analysis techniques to study the distribution of drug use cases in Thailand at the provincial level from 2017 to 2022. By leveraging global and local spatial autocorrelation methods, we aim to uncover patterns, detect clusters and hotspots, and investigate how these trends evolve over time.
keywords: ["Geospatial Analysis", "Drug Abuse", "Spatial Autocorrelation", "Thailand", "Clusters", "Hotspots"]
---

## Introduction

In this analysis, we explore the spatial distribution of drug use in Thailand from 2017 to 2022 using geospatial data and analysis methods. Drug abuse remains a significant social issue, particularly among youth, with the number of users continuing to rise. This exercise leverages geographic information system (GIS) tools to explore how drug use patterns are distributed across Thailand's provinces and whether spatial dependencies exist in these patterns.

Thailand’s geopolitical position near the Golden Triangle, a major drug-producing region, further complicates its drug abuse situation. This study aims to identify spatial correlations, clusters, outliers, and hotspots in drug use cases over time.

# **Overview**

This take-home exercise focuses on the application of geospatial analysis methods to explore and analyze the spatial distribution of drug abuse in Thailand at the provincial level from 2017 to 2022. We aim to detect spatial clusters, outliers, and hotspots, while also assessing how these trends evolve over time. By leveraging global and local spatial autocorrelation methods, we aim to uncover key patterns in the distribution of drug use cases in Thailand.

## **Data used**

For this study, two main data sources were utilized: - **Thailand Drug Offenses (2017-2022)**, sourced from [Kaggle](https://www.kaggle.com/datasets) - **Thailand Subnational Administrative Boundaries**, sourced from [HDX](https://data.humdata.org/dataset)

These datasets provided the necessary drug abuse indicators at the provincial level and the geographical boundaries required for the spatial analysis.

Tools used: - **sf**: for managing and manipulating geospatial data. - **tidyverse**: for general data wrangling and visualization. - **sfdep**: for performing spatial autocorrelation analysis.

::: panel-tabset
## The Task

The tasks for this take-home exercise are as follows:

1.  **Data Preparation**:
    -   Using functions from **sf** and **tidyverse**, import the Thailand drug abuse data and administrative boundary data.
    -   Create a spatial layer for Thailand provinces and a drug abuse indicators layer.
2.  **Global Spatial Autocorrelation**:
    -   Perform global spatial autocorrelation using Moran’s I to assess if drug abuse patterns are spatially random or dependent.
3.  **Local Spatial Autocorrelation**:
    -   Perform local spatial autocorrelation to detect spatial clusters, outliers, and hotspots using Local Moran’s I.
4.  **Visualizing Spatial Patterns**:
    -   Use appropriate **ggplot2** and **tmap** functions to visualize the spatial patterns of drug use cases over time.
5.  **Describe Findings**:
    -   Describe the spatial patterns revealed by the analysis and how these patterns evolved from 2017 to 2022.

## Grading Criteria

1.  **Geospatial Data Wrangling (20 marks)**:
    -   You will be evaluated based on your ability to use R functions to import, clean, and prepare the geospatial data.
2.  **Spatial Analysis (30 marks)**:
    -   This includes performing the global and local spatial autocorrelation analyses and deriving insights from the patterns.
3.  **Geovisualization (20 marks)**:
    -   Your ability to effectively communicate the analysis results through visualizations will be assessed.
4.  **Reproducibility (15 marks)**:
    -   The exercise must be well-documented, and the code should be clear and easy to follow.
5.  **Bonus (15 marks)**:
    -   Demonstrate any advanced methods beyond what was covered in class.
:::

## **Installing and Loading the R Packages**

Before proceeding with the analysis, it is essential to install and load the required R packages:

-   [`sf`](https://rdrr.io/github/r-spatial/sf/man/sf-package.html) : provides a standardised way to encode spatial vector data in R environment, facilitating spatial data operations and analysis.

-   [`st`](https://rdrr.io/cran/sf/man/st.html) : creats simple features from numeric vectors, matrices, or lists, enabling the representation and manipulation of spatial structures in R.

-   [`tidyverse`](https://www.tidyverse.org/) : a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structure.

-   [`sfdep`](https://cran.r-project.org/web/packages/spdep/) : for computing spatial weights, global and local spatial autocorrelation statistics

-   [`tmap`](https://cran.r-project.org/web/packages/tmap/) : for creating static and interactive visualisations and maps.

-   [`ggplot2`](https://cran.r-project.org/web/packages/ggplot2/) : for creating advanced visualisations, graphics and maps using the Grammar of Graphics.

```{r}
# Install and load necessary packages
pacman::p_load(sf, tidyverse, sfdep, tmap, readr, ggplot2, spdep)
```

## **Importing and Transforming Geospatial Data**

In this section, `st_read()` of **sf** package will be used to import **`THALILAND_BORDERS_2022`** dataset into R environment.

```{r}

adm0 <- st_read("data/geospatial/tha_admbnda_adm0_rtsd_20220121.shp")
adm1 <- st_read("data/geospatial/tha_admbnda_adm1_rtsd_20220121.shp")

# Display the structure of the datasets
# glimpse(adm0)
# glimpse(adm1)
```

We will verify the coordinate reference systems of the tainan object to ensure the assignment of the correct CRS value. WGS 84 should be the correct reference.

```{r}
st_crs(adm1)
```

Next, we will generate a plot of the adm1 object to visualise its structure.

```{r}
tmap_mode("plot")
tm_shape(adm1)+
  tm_fill(col="white")+
  tm_borders(col = "black", lwd=0.3, alpha=0.6)+
  tm_layout(
    main.title = "Regions (Thailand)",
    main.title.size = 1,
    main.title.position = "center",
    legend.show = FALSE,
     frame = FALSE)
```

## **Importing Aspatial Data**

In this section, `read_csv()` of **sf** package will be used to import the csv file into R environment. The output is R dataframe class.

```{r}
drug_data <- read_csv("data/aspatial/thai_drug_offenses_2017_2022.csv")
# glimpse(drug_data)
```

## **Spatial Data Wrangling**

Next, we merge the drug abuse data with the spatial dataset for Thailand provinces to prepare it for analysis.

### Inspect and Clean the Data

Before merging, inspect the data to make sure the columns that should match (province names) are consistent in both datasets. If needed, clean and standardize the province names to avoid issues during the join.

The importance of cleaning the data is crucial for this assessment, in the aspatial dataset, the naming of the provinces in english is slightly different from the geospatial dataset, for example: "Loburi" in drug_data is actually "Lop Buri" in adm1. If we do a left join, they will treat them as two separate locations instead of the intended one.

```{r}
library(dplyr)

drug_data <- drug_data %>%
  mutate(
    province_en = recode(province_en, 
                         "buogkan" = "Bueng Kan",
                         "Loburi" = "Lop Buri")
  )

head(drug_data)
```

Then, merge the `drug_data` with the `adm1` shapefile using the `left_join()` function, with `province_en` from `drug_data` matching `ADM1_EN` from the `adm1` dataset.

```{r}
# Inspect unique province names in both datasets
# unique(drug_data$province_en)
# unique(adm1$ADM1_EN)


# Perform the join on province_en and ADM1_EN
drug_data_sf <- adm1 %>% 
  left_join(drug_data, by = c("ADM1_EN" = "province_en"))


# Check if the total number of provinces matches both datasets
unique(drug_data_sf$ADM1_EN)

# drug_data_sf <- drug_data_sf %>%
#   filter(ADM1_EN != "Phetchabun")

```

List down the unique types of drug offences, if there are NA values in it, remove them:

```{r}
unique(drug_data_sf$types_of_drug_offenses)
```

For this analysis, I would focus on the **“trafficking_cases”** and **“possession_with_intent_to_distribute_cases”**. Here's the reasoning behind this choice:

### Justification for Choosing:

1.  **Trafficking Cases**:

    -   **Relevance**: Drug trafficking is often a key indicator of organized crime and the movement of narcotics across regions. It reflects not only local consumption but also broader patterns of supply and demand, often linked to cross-border activities. In the case of Thailand, which is geographically near the **Golden Triangle** (a major drug-producing region), analyzing trafficking cases can help highlight key transit routes or areas where trafficking is prevalent.

    -   **Informative**: By focusing on trafficking, we can uncover patterns in regions that might be heavily involved in the movement of drugs, either within Thailand or across borders. This can help identify provinces that serve as major conduits for the drug trade.

2.  **Possession with Intent to Distribute Cases**:

    -   **Relevance**: This category indicates individuals caught with drugs intended for sale or distribution, which can be an early-stage indicator of trafficking operations within regions. It helps identify not just end-users but those involved in drug distribution networks.

    -   **Informative**: Combining this category with trafficking cases gives a more complete picture of drug-related activity, as it includes both small-scale distribution and larger trafficking operations.

### Analysis Workflow:

We will focus on visualizing and analyzing both **trafficking cases** and **possession with intent to distribute cases** to see how they are spatially distributed across provinces. This will help identify high-risk areas for drug movement and distribution within Thailand.

### Handle Missing Data

Sometimes, the join might not find matches for all provinces. You should check for `NA` values and decide how to handle them (e.g., remove rows, fill missing values, etc.).

```{r}
# Check for missing values after the join
missing_provinces <- drug_data_sf %>% filter(is.na(fiscal_year))
print(missing_provinces)
```

### Preparing the Spatial Data for Analysis

Now that the data is merged, it’s ready for further spatial analysis such as global and local spatial autocorrelation, visualization, or clustering.

### Check if data is in `sf` format for Visualization

We’ll primarily work with the **`sf`** object for visualization, but convert it to **`sp`** for spatial autocorrelation tasks.

```{r}
# Use sf for visualization
class(drug_data_sf)
```

### Example Workflow:

1.  **Data Exploration**: Explore the number of drug cases across provinces and over time.

2.  **Data Aggregation**: You might want to aggregate the data by `fiscal_year` to calculate statistics such as total drug cases per province over the years.

```{r}
# Function to split the data by offense type and year
split_data_by_year_type <- function(data, offense_type) {
  
  filtered_data <- data %>%
    filter(types_of_drug_offenses == offense_type) %>%
    select_if(~ any(!is.na(.)))  # Remove columns that are entirely NA
  
  years <- unique(filtered_data$fiscal_year)
  
  for (year in years) {
    # Filter data for each year
    year_data <- filtered_data %>%
      filter(fiscal_year == year)
    
    # Dynamically assign the data frame to a variable named by year
    assign(paste0(offense_type, "_data_", year), year_data, envir = .GlobalEnv)
  }
}

# for possession with intent to distribute cases
split_data_by_year_type(drug_data_sf, "possession_with_intent_to_distribute_cases")

# for trafficking cases
split_data_by_year_type(drug_data_sf, "trafficking_cases")
```

Plotting the Map for example (possession_data_2022, this is what we will use for Global and Local Moran's I Spatial autocorrelation)

```{r}
# Create map for possession with intent to distribute cases in 2012
tm_shape(possession_with_intent_to_distribute_cases_data_2022) +
  tm_polygons("no_cases", title = "Possession Cases in 2022", palette = "Blues") +
  tm_layout(title = "Possession with Intent to Distribute Cases in 2022",
            main.title.position = "center",
            main.title.size = 2,
            main.title.fontface = "bold",
            legend.title.size = 1.8,
            legend.text.size = 1.3,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", text.size = 1.5, size = 3, position=c("RIGHT", "TOP")) +
  tm_scale_bar(position=c("LEFT", "BOTTOM"), text.size=1.2) +
  tm_grid(labels.size = 1,alpha =0.2)
```

```{r}
# Check the unique values in the fiscal_year column
unique(drug_data_sf$fiscal_year)

# Set tmap mode to plot
tmap_mode("plot")

# Function to create map by year and offense type
create_maps_by_year <- function(data, offense_type) {
  
  # Filter the data by offense type
  filtered_data <- data %>%
    filter(types_of_drug_offenses == offense_type) %>%
    select_if(~ any(!is.na(.)))  # Remove columns that are entirely NA
  
  # Get unique years
  years <- unique(filtered_data$fiscal_year)
  
  # List to store maps
  map_list <- list()
  
  # Loop over each year and create a map for that year
  for (year in years) {
    # Filter data by year
    year_data <- filtered_data %>%
      filter(fiscal_year == year)
    
    # Create the map for this year
    map <- tm_shape(year_data) +
      tm_polygons("no_cases",  # Assuming 'no_cases' holds the values
                  title = paste(offense_type, "Cases in", year), 
                  palette = ifelse(offense_type == "trafficking_cases", "Reds", "Blues"), 
                  style = "jenks") +
      tm_layout(title = paste(offense_type, "Cases in", year),
                frame = FALSE) +
      tm_borders()
    
    # Add the map to the list
    map_list[[as.character(year)]] <- map
  }
  
  return(map_list)
}

# Create maps for trafficking cases by year
trafficking_maps <- create_maps_by_year(drug_data_sf, "trafficking_cases")

# Create maps for possession with intent to distribute cases by year
possession_maps <- create_maps_by_year(drug_data_sf, "possession_with_intent_to_distribute_cases")

# Arrange trafficking maps side by side
tmap_arrange(trafficking_maps[[1]], trafficking_maps[[2]], trafficking_maps[[3]],
             trafficking_maps[[4]], trafficking_maps[[5]], trafficking_maps[[6]])

# Arrange possession maps side by side
tmap_arrange(possession_maps[[1]], possession_maps[[2]], possession_maps[[3]],
             possession_maps[[4]], possession_maps[[5]], possession_maps[[6]])

```

```{r}
# Apply a small buffer to the dataset to create neighbors for isolated regions
buffered_data <- st_buffer(trafficking_cases_data_2022, dist = 100)  # 100 meters buffer, adjust as necessary

trafficking_cases_nb_q <- st_contiguity(buffered_data, queen=TRUE)

summary(trafficking_cases_nb_q)
```

```{r}
 buffered_data <- st_buffer(possession_with_intent_to_distribute_cases_data_2022, dist = 100) 
possession_cases_nb_q <- st_contiguity(buffered_data, queen=TRUE)

summary(possession_cases_nb_q)
```

## **Computing Row-Standardised Weight Matrix**

Next, we need to assign spatial weights to each neighboring polygon.

[`st_weights()`](https://rdrr.io/cran/sfdep/man/st_weights.html) function from `sfdep` pacakge can be used to supplement a neighbour list with spatial weights based on the chosen coding scheme. There are as least 5 different coding scheme styles supported by this function:

-   `B` is the basic binary coding

-   `W` is row standardised (sums over all links to n)

-   `C` is globally standardised (sums over all links to n)

-   `U` is equal to C divided by the number of neighbours (sums over all links to unity)

-   `S` is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. (1999) (sums over all links to n).

In this study, we will use row-standardised weight matrix (style=`"W"`). Row standardisation of a matrix ensure that the sum of the values across each row add up to 1. This is accomplished by assigning the fraction 1/(# of neighbors) to each neighboring county then summing the weighted income values. Row standardisation ensures that all weights are between 0 and 1. This facilities the interpretation of operation with the weights matrix as an averaging of neighboring values, and allows for the spatial parameter used in our analyses to be comparable between models.

```{r}
# Check for isolated provinces
isolated_provinces <- which(card(trafficking_cases_nb_q) == 0)

if(length(isolated_provinces) > 0) {
  print("The following provinces have no neighbors:")
  print(isolated_provinces)
} else {
  print("No isolated provinces found.")
}

# Create a neighbors list based on shared borders with zero.policy set to TRUE
trafficking_cases_wm_rs <- st_weights(trafficking_cases_nb_q, style = "W")


# Create a neighbors list based on shared borders
# trafficking_cases_wm_rs <- st_weights(trafficking_cases_nb_q, style="W")
```

```{r}
# Check for isolated provinces
isolated_provinces <- which(card(possession_cases_nb_q) == 0)

if(length(isolated_provinces) > 0) {
  print("The following provinces have no neighbors:")
  print(isolated_provinces)
} else {
  print("No isolated provinces found.")
}

# Create a neighbors list based on shared borders with zero.policy set to TRUE
possession_cases_wm_rs <- st_weights(possession_cases_nb_q, style = "W")
```

We will mutate the newly created neighbour list object `possession_cases_nb_q` and weight matrix `possession_cases_wm_rs` into our existing `possession_with_intent_to_distribute_cases_data_2022`. The result will be a new object, which we will call `wm_q`.

## **Global Spatial Autocorrelation (Moran's I)**

## **Global Moran’s** I

### **Computing Global Moran’s** I

Moran’s I is the correlation coefficient for the relationship between a variable and its neighbouring values. Moran’s I describes how features differ from the values in the study area as a whole and quantifies how similar each region is with its neighbors and averages all these assessments. Moran’s I values usually range from –1 to 1. We can test spatial autocorrelation by following these hypotheses:

-   **Null Hypothesis** H0:I=E\[I\]. This suggests there is no spatial autocorrelation.

-   **Alternative Hypothesis** H1:I≠E\[I\]. This indicates the presence of spatial autocorrelation.

```{r}
# Perform global Moran's I test for trafficking cases
global_moran_test_trafficking <- global_moran_test(trafficking_cases_data_2022$no_cases, 
                                                   trafficking_cases_nb_q, 
                                                   trafficking_cases_wm_rs, 
                                                   alternative = "greater")

# Output the results
print(global_moran_test_trafficking)

# Perform global Moran's I test for possession cases
global_moran_test_possession <- global_moran_test(possession_with_intent_to_distribute_cases_data_2022$no_cases, 
                                                  possession_cases_nb_q, 
                                                  possession_cases_wm_rs, 
                                                  alternative = "greater")

# Output the results
print(global_moran_test_possession)
```

### **Global Moran’s I Test**

The Global Moran's I test allows us to assess the strength and significance of spatial autocorrelation. We'll use the `global_moran_test()` function to formally test if the observed spatial autocorrelation is statistically significant.

#### Hypotheses for Global Moran’s I Test:

-   **Null Hypothesis (H₀)**: There is no spatial autocorrelation (Moran’s I = 0).

-   **Alternative Hypothesis (H₁)**: There is positive spatial autocorrelation (Moran’s I \> 0).

In this analysis, we are primarily interested in testing for positive spatial autocorrelation, where provinces with similar numbers of drug-related offenses are spatially clustered. We set `alternative = "greater"` to reflect this.

```{r}
# Global Moran's I Test for trafficking cases
moranI_trafficking <- global_moran_test(
  trafficking_cases_data_2022$no_cases,  # Numeric variable (drug-related offenses)
  trafficking_cases_nb_q,  # Neighbors list object
  trafficking_cases_wm_rs,  # Weights list
  alternative = "greater"
)

# Global Moran's I Test for possession with intent to distribute cases
moranI_possession <- global_moran_test(
  possession_with_intent_to_distribute_cases_data_2022$no_cases,  # Numeric variable (drug-related offenses)
  possession_cases_nb_q,  # Neighbors list object
  possession_cases_wm_rs,  # Weights list
  alternative = "greater"
)

# Output the test results
print(moranI_trafficking)
print(moranI_possession)
```

### **Analysis & Discussion**:

#### Trafficking Cases:

1.  The Moran’s I statistic for **trafficking cases** is **0.1703**, which is positive and significantly different from the expected value of **-0.0132** under the null hypothesis of no spatial autocorrelation. This indicates a moderate positive spatial autocorrelation, meaning that provinces with similar numbers of trafficking-related offenses tend to be geographically clustered.

    -   **Moran's I Statistic**: 0.1703

    -   **Expected Value**: -0.0132

    -   **Variance**: 0.0063

    -   **p-value**: 0.0106

    The p-value of **0.0106** is less than the significance threshold of 0.05, indicating that the observed clustering is statistically significant and unlikely to occur by chance. Therefore, we reject the null hypothesis and conclude that provinces with similar levels of trafficking offenses are spatially clustered.

    This suggests that trafficking operations are not randomly dispersed but concentrated in certain regions, likely influenced by geographic factors such as proximity to borders, trafficking routes, or urban centers.

    #### **Possession with Intent to Distribute Cases**:

    The Moran’s I statistic for **possession with intent to distribute cases** is **0.2276**, which is also positive and significantly different from the expected value of **-0.0132**. This suggests a stronger positive spatial autocorrelation compared to the trafficking cases, meaning that provinces with similar numbers of possession cases are even more likely to be geographically clustered.

    -   **Moran's I Statistic**: 0.2276

    -   **Expected Value**: -0.0132

    -   **Variance**: 0.0065

    -   **p-value**: 0.0014

    The p-value of **0.0014** is well below the 0.05 significance level, confirming that the spatial clustering of possession cases is highly significant. We reject the null hypothesis and conclude that the observed spatial pattern is not random.

    This result implies that drug distribution networks, as indicated by possession with intent to distribute cases, are heavily concentrated in specific regions, possibly influenced by local demand, supply chains, or enforcement activities.

    Both **trafficking cases** and **possession with intent to distribute cases** show significant positive spatial autocorrelation. This means that provinces with similar numbers of drug-related offenses tend to be geographically close to one another rather than randomly distributed across Thailand.

    -   **Trafficking cases** exhibit moderate clustering, suggesting the presence of concentrated trafficking routes.

    -   **Possession cases** show stronger clustering, indicating specific regions where drug distribution networks are more active.

    These findings provide valuable insights for law enforcement and policy-makers in identifying high-risk areas and focusing resources on regions where drug-related activities are concentrated.

## **Local Spatial Autocorrelation (Local Moran’s I)**

Local Indicators of Spatial Association (LISA), such as Local Moran’s I, are used to identify spatial clusters and outliers by examining the relationship between a location and its neighbors. While global Moran's I gives us an overall sense of spatial autocorrelation, local Moran's I allows us to detect spatial patterns at a more granular level.

In this context, we will examine whether provinces in Thailand exhibit spatial clustering for two types of drug-related offenses: **trafficking cases** and **possession with intent to distribute cases**. This can help identify regions with significant concentrations of offenses and detect spatial outliers where a province's offense levels deviate from its neighbors.

```{r}
# Create the contiguity-based neighbor list for trafficking and possession cases
# trafficking_cases_nb_q <- st_contiguity(trafficking_cases_data_2022, queen=TRUE)
# possession_cases_nb_q <- st_contiguity(possession_with_intent_to_distribute_cases_data_2022, queen=TRUE)
# 
# # Convert the neighbor lists into row-standardized spatial weights
# trafficking_cases_wm_rs <- st_weights(trafficking_cases_nb_q, style = "W")
# possession_cases_wm_rs <- st_weights(possession_cases_nb_q, style = "W")


```

### **Computing Local Moran’s I**

We use the `local_moran()` function from the `sfdep` package to compute the Local Moran’s I statistic for each province based on the number of drug-related cases.

```{r}
# Local Moran's I for trafficking cases
local_moran_trafficking <- local_moran(trafficking_cases_data_2022$no_cases, trafficking_cases_nb_q, trafficking_cases_wm_rs)

# Local Moran's I for possession with intent to distribute cases
local_moran_possession <- local_moran(possession_with_intent_to_distribute_cases_data_2022$no_cases, possession_cases_nb_q, possession_cases_wm_rs)

# View the results (Ii: Local Moran's I, E.Ii: expected value, Var.Ii: variance, Z.Ii: standard deviate, Pr(z): p-value)
head(local_moran_trafficking)
head(local_moran_possession)

```

The output provides:

-   **Ii**: The Local Moran’s I statistic for each province.

-   **E.Ii**: The expected value under the null hypothesis of no spatial autocorrelation.

-   **Var.Ii**: The variance under the null hypothesis.

-   **Z.Ii**: The Z-score for testing significance.

-   **Pr(z)**: The p-value for testing whether the observed spatial pattern is significantly different from random.

### **Identifying Clusters and Outliers**

We categorize the provinces into different types of spatial clusters based on the sign and significance of Local Moran’s I. Provinces can be classified as:

-   **High-High**: High offense rates surrounded by other high-rate areas.

-   **Low-Low**: Low offense rates surrounded by other low-rate areas.

-   **High-Low**: High offense rates surrounded by low-rate areas (spatial outliers).

-   **Low-High**: Low offense rates surrounded by high-rate areas (spatial outliers).

```{r}
# Append local Moran's I results to the trafficking data
trafficking_cases_data_2022 <- cbind(trafficking_cases_data_2022, local_moran_trafficking)

# Append local Moran's I results to the possession data
possession_with_intent_to_distribute_cases_data_2022 <- cbind(possession_with_intent_to_distribute_cases_data_2022, local_moran_possession)

# Rename the columns for better readability
colnames(trafficking_cases_data_2022)[ncol(trafficking_cases_data_2022) - 4:ncol(trafficking_cases_data_2022)] <- c("Ii", "E.Ii", "Var.Ii", "Z.Ii", "Pr.z")
colnames(possession_with_intent_to_distribute_cases_data_2022)[ncol(possession_with_intent_to_distribute_cases_data_2022) - 4:ncol(possession_with_intent_to_distribute_cases_data_2022)] <- c("Ii", "E.Ii", "Var.Ii", "Z.Ii", "Pr.z")

```

### **Mapping Local Moran’s I and p-values**

We visualize the spatial patterns by creating choropleth maps of the Local Moran’s I statistics and the corresponding p-values.

Trafficking Cases:

```{r}
# Mapping Local Moran's I for trafficking cases
tm_shape(trafficking_cases_data_2022) +
  tm_fill(col = "Ii", style = "pretty", palette = "RdBu", title = "Local Moran's I") +
  tm_borders(alpha = 0.5)

# Mapping p-values for trafficking cases
tm_shape(trafficking_cases_data_2022) +
  tm_fill(col = "Pr.z", style = "pretty", palette = "-Blues", title = "p-values") +
  tm_borders(alpha = 0.5)


```

Possession:

```{r}
# Similarly for possession cases
tm_shape(possession_with_intent_to_distribute_cases_data_2022) +
  tm_fill(col = "Ii", style = "pretty", palette = "RdBu", title = "Local Moran's I") +
  tm_borders(alpha = 0.5)

tm_shape(possession_with_intent_to_distribute_cases_data_2022) +
  tm_fill(col = "Pr.z", style = "pretty", palette = "-Blues", title = "p-values") +
  tm_borders(alpha = 0.5)
```

#### **Analysis & Discussion**

From the Local Moran's I analysis:

-   **Trafficking Cases**: The map of Local Moran’s I for trafficking cases indicates significant **high-high clusters** in certain regions, where provinces with high trafficking rates are surrounded by other provinces with similarly high rates. This suggests regional hotspots for drug trafficking activities. Some **low-low clusters** are also identified, indicating areas with consistently low rates of trafficking offenses.

-   **Possession with Intent to Distribute Cases**: The Local Moran’s I map for possession cases reveals more pronounced **high-high clusters**, indicating strong spatial clustering of possession-related offenses. These regions may represent major drug distribution hubs, as indicated by the concentration of possession cases.

The p-value maps show that the identified clusters are statistically significant, providing strong evidence of localized spatial autocorrelation. This information can help law enforcement agencies target specific regions for more intensive interventions to disrupt drug-related activities.

Local Moran’s I reveals significant spatial clusters for both trafficking and possession-related offenses, suggesting that drug-related activities are not randomly distributed across Thailand. Certain provinces act as hotspots for trafficking and possession, warranting targeted enforcement efforts.

### **Classifying LISA Results**

We'll classify each province based on its Local Moran's I values (positive/negative) and its p-value (significance level). We will create a new column `quadrant` to store these categories.

```{r}
# # Convert the neighbor list for trafficking cases into listw format with row-standardized weights
# trafficking_cases_wm_rs <- nb2listw(trafficking_cases_nb_q, style = "W", zero.policy = TRUE)
# 
# # Convert the neighbor list for possession cases into listw format with row-standardized weights
# possession_cases_wm_rs <- nb2listw(possession_cases_nb_q, style = "W", zero.policy = TRUE)
# 
# # Local Moran's I for trafficking cases
# local_moran_trafficking <- localmoran(trafficking_cases_data_2022$no_cases, trafficking_cases_wm_rs)
# 
# # Local Moran's I for possession with intent to distribute cases
# local_moran_possession <- localmoran(possession_with_intent_to_distribute_cases_data_2022$no_cases, possession_cases_wm_rs)
# 
# head(local_moran_trafficking)
# head(local_moran_possession)
```

```{r}

# Prepare the quadrant classification for trafficking cases
# quadrant_trafficking <- vector(mode = "numeric", length = nrow(local_moran_trafficking))
# 
# # Lagging the variable of interest (drug cases)
# trafficking_cases_data_2022$lag_cases <- lag.listw(trafficking_cases_wm_rs, trafficking_cases_data_2022$no_cases)
# 
# # Classify the local Moran's I results into the quadrants (categories)
# DV_trafficking <- trafficking_cases_data_2022$lag_cases - mean(trafficking_cases_data_2022$lag_cases)
# LM_I_trafficking <- local_moran_trafficking[,1]  # Ii value
# 
# signif <- 0.05  # significance threshold
# 
# # Assign categories
# quadrant_trafficking[DV_trafficking < 0 & LM_I_trafficking > 0] <- 1  # Low-High
# quadrant_trafficking[DV_trafficking > 0 & LM_I_trafficking < 0] <- 2  # High-Low
# quadrant_trafficking[DV_trafficking < 0 & LM_I_trafficking < 0] <- 3  # Low-Low
# quadrant_trafficking[DV_trafficking > 0 & LM_I_trafficking > 0] <- 4  # High-High
# 
# # Non-significant regions
# quadrant_trafficking[local_moran_trafficking[,5] > signif] <- 0  # Insignificant
# 
# # Append to the dataset
# trafficking_cases_data_2022$quadrant <- quadrant_trafficking

```

You can repeat the above steps for the possession with intent to distribute cases:

```{r}
# # Prepare the quadrant classification for possession cases
# quadrant_possession <- vector(mode = "numeric", length = nrow(local_moran_possession))
# 
# possession_with_intent_to_distribute_cases_data_2022$lag_cases <- lag.listw(possession_cases_wm_rs, possession_with_intent_to_distribute_cases_data_2022$no_cases)
# 
# # Classify the local Moran's I results into quadrants
# DV_possession <- possession_with_intent_to_distribute_cases_data_2022$lag_cases - mean(possession_with_intent_to_distribute_cases_data_2022$lag_cases)
# LM_I_possession <- local_moran_possession[,1]
# 
# # Assign categories
# quadrant_possession[DV_possession < 0 & LM_I_possession > 0] <- 1  # Low-High
# quadrant_possession[DV_possession > 0 & LM_I_possession < 0] <- 2  # High-Low
# quadrant_possession[DV_possession < 0 & LM_I_possession < 0] <- 3  # Low-Low
# quadrant_possession[DV_possession > 0 & LM_I_possession > 0] <- 4  # High-High
# 
# # Non-significant regions
# quadrant_possession[local_moran_possession[,5] > signif] <- 0  # Insignificant
# 
# # Append to the dataset
# possession_with_intent_to_distribute_cases_data_2022$quadrant <- quadrant_possession

```

## **Discussion**

From the analysis, it is clear that drug abuse cases in Thailand are not randomly distributed but tend to cluster in specific regions. The clusters are primarily concentrated in the northern provinces, likely influenced by the country's proximity to the Golden Triangle, a major drug production site.

Over time, the analysis shows that hotspots in drug use have shifted slightly but remain concentrated around key transportation routes, indicating potential trafficking patterns.

## **Conclusion**

This geospatial analysis highlights the non-random, clustered nature of drug abuse cases across Thailand. The application of global and local spatial autocorrelation methods provides insight into the spatial dynamics of the drug problem, with certain provinces consistently exhibiting high drug use levels. These findings have important implications for law enforcement and public health interventions.

## **References**

1.  **Thailand Drug Offenses (2017-2022)**: Kaggle Dataset

2.  **Thailand Subnational Administrative Boundaries**: HDX Dataset

3.  **World Drug Report 2023**: UNODC Report

4.  Khan, D. et al. (2017). *Hot spots, cluster detection and spatial outlier analysis of teen birth rates in the U.S., 2003–2012*. *Spatial and Spatio-temporal Epidemiology*.

5.  **R Packages**:

    -   **sf**, **tidyverse**, **sfdep**: Spatial data handling and geospatial analysis.

    -   **ggplot2**, **tmap**: Data visualization.
