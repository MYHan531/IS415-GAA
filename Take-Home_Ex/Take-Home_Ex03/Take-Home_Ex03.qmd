---
title: "Take-Home Exercise 3: Prototyping Modules for Geospatial Analytics Shiny Application"
title-block-banner: true
author: "Han Ming Yan"
date: 2024-10-30
date-modified: "last-modified"
format:
  html:
    toc: true
    toc-depth: 3
    toc-location: right
    number-sections: true
    number-depth: 3
    code-copy: true
    embed-resources: true
    lightbox: true
    lang: en
---

# **Overview**

Prototyping serves as a pivotal step in application development, bridging theoretical design with practical user interaction. A well-constructed prototype validates design decisions by providing a tangible platform to test user experience (UX) elements with stakeholders. This approach helps refine the application’s UX before further resources are invested, enhancing both efficiency and effectiveness.

## **Prototyping for Shiny Application**

In the context of developing a **Shiny application** using **R**, prototyping plays a crucial role in defining technical requirements, testing functionality, and refining the user interface.

1.  **Evaluating R Packages**: The initial step in Shiny prototyping involves identifying and validating R packages from CRAN that support the app’s functionality. This ensures the application’s foundation is reliable and compatible with the required analyses and visualisations.

2.  **Testing R Code**: Prototyping also involves running and validating specific R code snippets to confirm they produce expected outputs. This testing process helps ensure a smooth experience for end-users by troubleshooting issues early.

3.  **Setting Parameters and Outputs**: Deciding on the parameters and outputs to expose in the application is a key step. These will guide user interaction and determine the dynamic nature of the app.

4.  **Designing the UI with Shiny Components**: The final prototyping phase involves selecting Shiny UI components that allow users to interact with the chosen parameters intuitively.

This structured approach facilitates a seamless transition from conceptual design to a fully functional application, prioritizing both technical robustness and user experience.

# **Understanding Basics of Shiny**

**Shiny** is an open-source R package designed to simplify the creation of interactive web applications without requiring knowledge of web design languages like HTML, CSS, or JavaScript.

### **Core Components of Shiny**

A Shiny application typically consists of an **`app.R`** file that includes two main sections:

1.  **User Interface (UI)** - Defines the front-end layout and elements that users interact with.

2.  **Server** - Contains the back-end logic, handling input-processing and output-rendering functions.

This modular structure keeps the UI and server functions distinct, ensuring a clean, organized codebase.

You can also turn it into a microservice like structure by creating a ui.R and a server.R, this is done when the application is complex and complicated that it would be messy and long if they are in the same app.R file.

### **UI Layout in Shiny**

The Shiny UI includes components like:

1.  **Header Panel** (`headerPanel`): Displays the app’s title or brief descriptions.

2.  **Sidebar Panel** (`sidebarPanel`): A vertical panel for input controls, offering users a way to interact with the app.

3.  **Main Panel** (`mainPanel`): The primary area for output displays (e.g., maps, plots, tables).

### **Flexible Layout with FluidRow and Column**

Shiny employs a grid layout system through `fluidRow()` and `column()`, based on a 12-column structure, allowing flexible UI design. Each `fluidRow` can hold multiple `column` elements, enabling a variety of layouts by adjusting column widths.

### **Navbar Pages for Organized Layouts**

To structure complex applications, **`navbarPage()`** is available, enabling multiple sub-components within the app, each with distinct sidebar, tabset, or layout configurations.

### **User Inputs and Controls in Sidebar Panel**

Shiny provides various functions for defining user inputs, such as:

-   **`sliderInput()`**: Creates a slider for range-based input.

-   **`selectInput()`**: Generates a dropdown list.

-   **`textInput()`**: Adds a text box for user input.

-   **`numericInput()`**: Allows users to enter numeric values.

-   **`checkboxInput()` & `checkboxGroupInput()`**: Useful for binary or multiple-choice selections.

After configuring inputs, **`submitButton()`** compiles and sends inputs to the server, updating outputs accordingly.

### **Outputs in Main Panel**

Outputs are defined in the main panel with placeholders like:

-   **`textOutput()`**, **`tableOutput()`**, and **`plotOutput()`**.

-   Rendered on the UI via corresponding functions (`renderText`, `renderTable`, `renderPlot`), these components can be customized using `fluidRow()` and `column()`.

### **Organizing Outputs with Tabsets**

To segment content in the main panel, **`tabsetPanel()`** creates a series of tabs, helping organize multiple outputs within the application.

![](images/clipboard-1653656418.png)

### **Server Component**

The server function processes inputs from the UI and defines outputs based on input values. It typically includes parameters for:

-   **Input**: Accesses user-specified UI inputs.

-   **Output**: Dictates output displays on the UI.

-   **Session** (optional): Manages session-specific settings.

The **UI and server interaction** is a two-way communication loop, where inputs from the UI are processed by the server, and the resulting outputs are displayed back on the UI.

# Import Packages

```{r}
# Load necessary packages for geospatial and statistical analysis
pacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)
```

# Import Data

```{r}
# Load the economic data from CSV file
# farms_data <- read_csv("data/aspatial/farms.csv", skip = 1)
farms_data <-  read_rds("data/rds/farms.rds")
enterprise_data <- read_csv("data/aspatial/Enterprise.csv")
ff_data <- read_csv("data/aspatial/Forestry&Fishing.csv")
industry_data <- read_csv("data/aspatial/Industry.csv")

# Reference geospatial data (shapefile)
vietnam_provinces <- st_read(dsn = "data/geospatial", layer = "Dia_phan_Tinh")
```

```{r}
head(farms_data)
```

# Data Preparation and Cleaning

Data cleaning is an important step in preparing the dataset for accurate, reliable analysis, particularly when working with spatial and temporal data. Here are the steps to clean and prepare the data:

-   **Ensuring Consistent Data Types**:

    -   The initial step converts all columns starting with “20” (likely years representing temporal data) to numeric values. This standardises the data type, allowing for mathematical operations, comparisons, and aggregation.

    -   This transformation is necessary because inconsistent data types (e.g., characters mixed with numbers) can lead to issues during analysis, especially when calculating statistical summaries or performing visualisations.

-   **Handling Missing Values**:

    -   Replacing `NA` (missing) values with zero in columns starting with “20” ensures that missing data does not interfere with the analysis.

    -   This is particularly important for spatial data analysis, as missing values can skew results in metrics such as Moran’s I or when calculating cluster statistics.

    -   Replacing `NA` with zero is also logical in this context, assuming the absence of data indicates a count of zero farms for those years in specific provinces.

-   **Reformatting the Data for Analysis**:

    -   The data is converted to a “long” format using the `pivot_longer` function from the **dplyr** package, where each row represents a unique combination of province and year. This restructuring supports year-based analysis, making it easier to examine trends over time.

    -   The “long” format is essential for running year-based comparisons and visualisations in time series, as well as for joining spatial and non-spatial datasets.

-   **Aligning Geographic Data**:

    -   Filtering out provinces not represented in the spatial (geographic) dataset ensures consistency across the spatial and economic data. This step limits the data to regions with complete spatial information, which is critical for accurate spatial joins and analysis.

    -   Consistency between spatial and economic data prevents errors during mapping and spatial operations, where discrepancies in geographic identifiers can lead to missing or mismatched entries.

```{r}
# Clean and organize the farms data for analysis
# farms_data <- farms_data %>%
#   filter(!is.na(`Cities, provincies`)) %>%
#   rename(province = `Cities, provincies`)
farms_data <- farms_data %>%
  mutate(across(starts_with("20"), ~ as.numeric(.)))

farms_data <- farms_data %>%
     mutate(across(starts_with("20"), ~ replace_na(., 0)))

farms_long <- farms_data %>%
  pivot_longer(cols = starts_with("20"), names_to = "year_type", values_to = "count")


```

```{r}
geospatial_provinces <- unique(vietnam_provinces$Name)

farms_data <- farms_data %>%
    filter( geospatial_provinces %in% `Cities, provincies`)
```

# Exploratory Spatial Data Analysis (EDA)

Exploratory Spatial Data Analysis (ESDA) serves as the first step in understanding spatial data patterns and uncovering relationships within the data. This initial phase is essential for identifying underlying spatial structures, such as clustering, dispersion, and potential outliers, before proceeding to more complex spatial modeling or predictive analysis.

1.  **Purpose of ESDA**:

    -   **Identify Patterns and Trends**: ESDA helps reveal patterns, such as clusters of high or low values, that would be challenging to detect in raw tabular data alone. For example, visualising farm counts by province across multiple years can show trends in agricultural activity, highlighting regions of growth or decline.

    -   **Spatial Autocorrelation**: By measuring spatial autocorrelation, ESDA evaluates whether similar values are geographically clustered. A common method, Moran’s I, quantifies the degree to which high or low values group spatially. Positive spatial autocorrelation indicates clusters of similar values, while negative suggests dispersion.

    -   **Localised Insights**: Local Indicators of Spatial Association (LISA) go further to detect localised clusters and outliers, helping pinpoint specific provinces where farm activity is exceptionally high or low compared to surrounding areas. These insights can guide targeted interventions, such as policies or resources for underperforming regions.

2.  **Setting Up the Mapping Process**:

    -   The mapping setup in `tmap` serves as the initial step for visualizing the cleaned data. By plotting variables (e.g., “Code”), we ensure that the spatial data aligns with the province data from the economic dataset, providing a foundation for analyzing spatial distribution.

    -   Mapping each variable in isolation lets us verify the integrity of data merges and visualizes the geographic spread of each attribute, such as farm counts, across provinces. This setup lays the groundwork for more detailed spatial visualisations, including time-series and clustering analysis.

```{r}
# Rename the 'Name' column in the geospatial data to 'province_name'
vietnam_provinces <- vietnam_provinces %>%
  rename(province_name = Name)

# Similarly, rename 'Name' in the economic data if needed, e.g., 'province_name'
farms_long <- farms_long %>%
  rename(province_name = `Cities, provincies`) %>%
  filter(!province_name %in% c("WHOLE COUNTRY", "Northern Central area and Central coastal area", "Northern midlands and mountain areas"))

vietnam_eda_data <- vietnam_provinces %>%
  left_join(farms_long, by = "province_name")
```

```{r}
#| fig-height: 80
# Set tmap to plot mode
tmap_mode("plot")

# Display each map separately
tm_shape(vietnam_eda_data) + 
  tm_polygons("Code", title = "Code") +
  tm_layout(main.title = "Map of Code", main.title.size = 1.5)

tm_shape(vietnam_eda_data) + 
  tm_polygons("province_name", title = "Province Name") +
  tm_layout(main.title = "Map of Province Name", main.title.size = 1.5)

tm_shape(vietnam_eda_data) + 
  tm_polygons("year_type", title = "Year Type") +
  tm_layout(main.title = "Map of Year Type", main.title.size = 1.5)

tm_shape(vietnam_eda_data) + 
  tm_polygons("count", title = "Count") +
  tm_layout(main.title = "Map of Count", main.title.size = 1.5)

```

## Viewing the 2019 dataset for Vietnam

Here we focus on visualising farm data across different categories for the year 2019. By mapping each type of farm (total, cultivation, livestock, and fishing) separately, we gain insights into the spatial distribution and concentration of different farming activities across Vietnamese provinces.

1.  **Total Farms for 2019**:

    -   The total number of farms in each province is visualised using a green palette, representing the overall farming activity for 2019.

    -   Mapping the total farms provides a baseline for understanding the distribution of agricultural activity across the country.

```{r}
# Total farms for 2019 
map_total_2019 <- vietnam_eda_data %>%
  left_join(farms_long %>% filter(year_type == "2019 Total"), by = "province_name")

tm_shape(map_total_2019) +
  tm_polygons("count.x", title = "2019 Total Farms", palette = "Greens") +
  tm_layout(legend.position = c("right", "bottom"))

```

**Cultivation Farms for 2019**:

-   The distribution of cultivation farms, which focus on crop production, is visualised with an orange palette.

-   This map enables us to examine areas where crop-based farming is prominent, potentially identifying key agricultural regions for staple crops.

**Livestock Farms for 2019**:

-   The distribution of livestock farms, represented with a blue palette, highlights areas where animal husbandry is more prominent.

-   This map can help identify provinces that may be more reliant on livestock production, offering insights into regional specialisation in agricultural practices.

**Fishing Farms for 2019**:

-   Fishing farms are visualised using a purple palette, showing provinces where fishing activities form a significant part of the agricultural landscape.

-   This map is useful for understanding the contribution of aquaculture to local economies, particularly in coastal and water-rich provinces.

```{r}
# Cultivation farms for 2019 
map_cultivation_2019 <- vietnam_eda_data %>%
  left_join(farms_long %>% filter(year_type == "2019 Cultivation farm"), by = "province_name")

tm_shape(map_cultivation_2019) +
  tm_polygons("count.x", title = "2019 Cultivation Farms", palette = "Oranges") +
  tm_layout(legend.position = c("right", "bottom"))

# Livestock farms for 2019 
map_livestock_2019 <- vietnam_eda_data %>%
  left_join(farms_long %>% filter(year_type == "2019 Livestock farm"), by = "province_name")

tm_shape(map_livestock_2019) +
  tm_polygons("count.x", title = "2019 Livestock Farms", palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom"))

# Fishing farms for 2019 
map_fishing_2019 <- vietnam_eda_data %>%
  left_join(farms_long %>% filter(year_type == "2019 Fishing farm"), by = "province_name")

tm_shape(map_fishing_2019) +
  tm_polygons("count.x", title = "2019 Fishing Farms", palette = "Purples") +
  tm_layout(legend.position = c("right", "bottom"))


```

![](images/clipboard-1291225768.png)

## Comparing with 2012 Data

To observe how agricultural activities have evolved, we compare the 2019 data with similar maps for 2012. This comparison helps in identifying trends over time, such as growth in certain farm types or shifts in farming practices.

1.  **Total Farms for 2012**:

    -   This map provides a baseline for how farm distribution has changed by 2019, potentially indicating areas of agricultural expansion or reduction.

2.  **Cultivation Farms for 2012**:

    -   This map allows for a direct comparison with 2019 to see where crop farming has intensified or declined.

3.  **Livestock Farms for 2012**:

    -   By comparing livestock farm distribution in 2012 with 2019, we can observe shifts in regions where animal farming is prominent.

4.  **Fishing Farms for 2012**:

    -   This map allows us to assess the stability or growth of fishing farms from 2012 to 2019, especially in coastal provinces.

```{r}
# Total farms for 2012
map_total_2012 <- vietnam_eda_data %>%
  left_join(farms_long %>% filter(year_type == "2012 Total"), by = "province_name")

tm_shape(map_total_2012) +
  tm_polygons("count.x", title = "2012 Total Farms", palette = "Greens") +
  tm_layout(legend.position = c("right", "bottom"))

# Cultivation farms for 2012 
map_cultivation_2012 <- vietnam_eda_data %>%
  left_join(farms_long %>% filter(year_type == "2012 Cultivation farm"), by = "province_name")

tm_shape(map_cultivation_2012) +
  tm_polygons("count.x", title = "2012 Cultivation Farms", palette = "Oranges") +
  tm_layout(legend.position = c("right", "bottom"))

# Livestock farms for 2012 
map_livestock_2012 <- vietnam_eda_data %>%
  left_join(farms_long %>% filter(year_type == "2012 Livestock farm"), by = "province_name")

tm_shape(map_livestock_2012) +
  tm_polygons("count.x", title = "2012 Livestock Farms", palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom"))

# Fishing farms for 2012 
map_fishing_2012 <- vietnam_eda_data %>%
  left_join(farms_long %>% filter(year_type == "2012 Fishing farm"), by = "province_name")

tm_shape(map_fishing_2012) +
  tm_polygons("count.x", title = "2012 Fishing Farms", palette = "Purples") +
  tm_layout(legend.position = c("right", "bottom"))


```

![](images/clipboard-131272105.png)

This structured comparison across years provides valuable insights into regional trends and helps inform strategies for resource allocation, investment, and policy support tailored to the needs and strengths of specific provinces.

# Examine Spatial Autocorrelation (Global Moran’s I)

Spatial autocorrelation helps determine if farm counts are clustered, dispersed, or randomly distributed across space. **Moran’s I** is a common measure for this.

In spatial data analysis, **Moran’s I** is a crucial statistic for measuring spatial autocorrelation—essentially, the degree to which similar values are clustered together across space. In simpler terms, it tells us whether provinces with high farm counts are located near each other (positive spatial autocorrelation), or whether high and low values are scattered randomly across the map (no spatial autocorrelation).

### What is Moran’s I?

The **Moran’s I** statistic ranges from -1 to +1 and is interpreted as follows:

-   **+1**: Perfect positive spatial autocorrelation (neighboring areas have very similar values).

-   **0**: No spatial autocorrelation (values are randomly distributed in space).

-   **-1**: Perfect negative spatial autocorrelation (neighboring areas have opposite values).

### **Define Spatial Neighbors and Weights**:

Create a spatial weights matrix based on neighboring provinces.

```{r}
# # Calculate Moran's I for a specific year_type, e.g., "2019 Total"

map_total_2019_filtered <- map_total_2019 %>%
  filter(year_type.x == "2019 Total") %>%
  select(province_name, count.x, geometry) %>% # Select relevant columns
  distinct()  # Ensure unique rows per province

# Ensure the spatial data (vietnam_provinces) includes only the provinces in map_total_2019_filtered
vietnam_provinces_filtered <- vietnam_provinces %>%
  filter(province_name %in% map_total_2019_filtered$province_name)

# Create a neighbors and weights list based on the filtered spatial data
neighbors <- poly2nb(vietnam_provinces_filtered, queen = TRUE)
weights <- nb2listw(neighbors, style = "W", zero.policy = TRUE)
```

### Calculate Moran’s I

```{r}
# Now run Moran's I test on the filtered data
morans_i <- moran.test(map_total_2019_filtered$count.x, weights, zero.policy = TRUE)
print(morans_i)
```

In your results:

-   **Moran I statistic**: `0.1474`, which is a positive value, suggests a slight tendency for spatial clustering. However, since it’s not close to 1, the clustering is weak.

#### 1. Moran I Statistic

-   The **Moran I statistic** value of `0.1474` indicates a mild positive spatial autocorrelation. This means that provinces with similar farm counts (e.g., high or low) are somewhat clustered together, though the effect is weak.

-   A higher value closer to +1 would imply stronger clustering, whereas a value closer to 0 would indicate that farm counts are distributed more randomly.

#### 2. Expectation

-   The **Expectation** of Moran’s I under the null hypothesis (random spatial distribution) is `-0.0161`. This is the average Moran’s I we’d expect if there were no spatial structure at all.

-   Your observed Moran’s I (0.1474) is higher than the expectation (-0.0161), suggesting a tendency towards clustering rather than randomness. Comparing the **Expectation** to the **Moran’s I** value helps us understand if our observed spatial pattern deviates from a random distribution.

#### 3. Variance

-   **Variance** measures the spread of possible Moran’s I values under the null hypothesis. A low variance means our observed Moran’s I is less likely to occur by chance, making it a more reliable indication of spatial clustering.

-   In your result, the **Variance** is `0.0061`, which helps in calculating the standard deviation and, in turn, the significance of Moran’s I.

### What About the p-value?

The **p-value** is crucial for determining if the observed Moran’s I is statistically significant. In your output:

-   **p-value = 0.0182**: This indicates a 1.82% chance that the observed spatial pattern could have occurred randomly.

-   In most statistical tests, a p-value below 0.05 would indicate statistical significance, meaning we’d confidently say clustering exists. Here, the p-value is slightly above 0.05, so it’s marginally **not significant** at the 5% level. However, it’s close enough that we might consider exploring further or using a 10% threshold, where it would be considered marginally significant.

### Summary of Results

Based on your Moran's I results:

-   There is weak evidence of spatial clustering in farm counts across provinces (`Moran I = 0.1474`).

-   The positive Moran’s I, compared to the expectation under randomness (-0.0161), suggests a slight clustering effect.

-   However, the p-value of 0.0182 indicates that this result is only marginally significant, meaning we can't conclusively say that clustering exists at the 5% significance level.

### Why It Matters

Understanding spatial autocorrelation is important because it reveals whether similar values are clustered or dispersed across regions. For policymakers or researchers analyzing farm distribution, identifying clusters could help target specific regions for agricultural support, development, or resources. In cases where spatial autocorrelation is significant, it often suggests underlying spatial processes that require further investigation.

In your case, while the results do not provide strong evidence of clustering, the marginal p-value suggests that a more in-depth analysis or additional data might reveal more substantial spatial patterns.

## Local Moran I

After calculating the **Global Moran's I**, the next steps in **Spatial Exploratory Data Analysis (Spatial EDA)** typically involve **Local Spatial Autocorrelation Analysis** and additional **visualisations** to identify specific clusters, outliers, and patterns in your data.

### **Local Indicators of Spatial Association (LISA)**

1.  **Purpose**: While Global Moran’s I provides an overall measure of spatial autocorrelation, **Local Moran’s I (LISA)** identifies specific clusters and outliers in the dataset. LISA helps to pinpoint local patterns that may not be apparent in the global statistic.

2.  **Method**: You can calculate Local Moran's I using the `localmoran()` function from the `spdep` package.

```{r}
# Calculate Local Moran's I for farm count
local_morans <- localmoran(map_total_2019_filtered$count.x, weights, zero.policy = TRUE)
local_morans
# Add the Local Moran's I values and p-values to the spatial data
map_total_2019_filtered$local_I <- local_morans[, 1]  # Local Moran's I statistic
map_total_2019_filtered$p_value <- local_morans[, 5]  # P-value for Local Moran's I
```

-   **Local Moran’s I (local_I)**: Indicates clustering (high positive values) or outliers (high negative values) for each province.

-   **P-value**: Shows the statistical significance of clustering for each location. Provinces with significant p-values (usually \<0.05) are those with notable spatial patterns.

### **Mapping Local Moran’s I (LISA Map)**

Now that we have calculated Local Moran's I, let's map it to visualize the clusters and outliers across provinces. This will allow you to identify "hot spots" (high values surrounded by high values) and "cold spots" (low values surrounded by low values).

```{r}

# Map the Local Moran's I (LISA) values
tm_shape(map_total_2019_filtered) +
  tm_polygons("local_I", style = "quantile", title = "Local Moran's I") +
  tm_borders() +
  tm_layout(main.title = "LISA (Local Moran's I) for Farm Counts")

# Map the statistically significant clusters with p-value
tm_shape(map_total_2019_filtered) +
  tm_polygons("p_value", style = "fixed", breaks = c(0, 0.05, 1),
              palette = c("red", "grey"), title = "Significant Clusters (p < 0.05)") +
  tm_borders() +
  tm_layout(main.title = "Significant Clusters (p < 0.05)", legend.position = c("right", "bottom"))

```

![](images/clipboard-1456884285.png)

![](images/clipboard-3584049050.png)

### **Identify Cluster Types: High-High, Low-Low, High-Low, Low-High**

To further classify spatial patterns, you can categorize clusters into four types:

-   **High-High (HH)**: High values surrounded by high values (hot spots).

-   **Low-Low (LL)**: Low values surrounded by low values (cold spots).

-   **High-Low (HL)**: High values surrounded by low values (potential outliers).

-   **Low-High (LH)**: Low values surrounded by high values (potential outliers).

Add these classifications to your data based on the **local_I** and **p_value**.

```{r}
map_total_2019_filtered <- map_total_2019_filtered %>%
  mutate(cluster_type = case_when(
    local_I > 0 & p_value < 0.05 & count.x > mean(count.x, na.rm = TRUE) ~ "High-High",
    local_I > 0 & p_value < 0.05 & count.x < mean(count.x, na.rm = TRUE) ~ "Low-Low",
    local_I < 0 & p_value < 0.05 & count.x > mean(count.x, na.rm = TRUE) ~ "High-Low",
    local_I < 0 & p_value < 0.05 & count.x < mean(count.x, na.rm = TRUE) ~ "Low-High",
    TRUE ~ "Not Significant"
  ))

tm_shape(map_total_2019_filtered) +
  tm_polygons("cluster_type", palette = c("red", "blue", "orange", "green", "grey"),
              title = "Cluster Type") +
  tm_layout(main.title = "Cluster Types Based on Local Moran's I", legend.position = c("right", "bottom"))

```

Shiny Version:

![](images/clipboard-2103325683.png)

# **Spatial Trend Analysis**

Analyzing trends over time is essential for understanding how spatial distributions evolve, particularly with datasets that include a temporal component. Tracking these changes in farm distribution allows us to pinpoint shifts and emerging clusters over the years.

**Objective**: Examine farm distribution from 2012 to 2023, visualizing spatial trends and identifying any patterns or clusters that emerge.

**Approach**: We’ll map total farm counts year-by-year, creating a time series of spatial snapshots that reveal how farm distribution has changed across Vietnamese provinces

```{r}
for (year in 2012:2023) {
  map_year <- vietnam_eda_data %>%
    left_join(farms_long %>% filter(year_type == paste(year, "Total")), by = "province_name")
  
  print(
    tm_shape(map_year) +
      tm_polygons("count.x", title = paste(year, "Total Farms"), palette = "Blues") +
      tm_layout(main.title = paste("Total Farms in", year), legend.position = c("right", "bottom"))
  )
}

```

Each map highlights the total number of farms in each province for the selected year, allowing us to observe the spatial and temporal shifts in farm activity across Vietnam.

### **Summary and Interpretation**

Upon completing the Spatial Exploratory Data Analysis (EDA), we identified several key spatial patterns in farm distribution across Vietnamese provinces. These insights, derived through both global and local spatial autocorrelation methods, highlight the data's underlying spatial structure and reveal areas of potential interest for agricultural development, policy-making, and investment.

**1. Global Autocorrelation (Moran’s I)**: The Global Moran’s I statistic assesses whether similar values in farm counts are clustered across provinces. While the positive value suggests slight clustering, the statistical significance is marginal, indicating only a minor tendency for spatial clustering. This suggests that while there is some level of clustering in farm distribution, it’s not dominant enough to make broad assumptions about uniform spatial patterns at a global scale.

**2. Local Clusters (LISA)**: Local Moran’s I (LISA) allows us to drill down to identify specific clusters and outliers. This granularity helps detect regional agricultural hubs (high-high clusters) and areas of low activity (low-low clusters), which may benefit from targeted interventions. By pinpointing both dense and sparse regions of farm activity, we gain insights that could drive location-specific strategies and resource allocation.

**3. Cluster Types**:

-   **High-High (HH)**: Areas where high farm counts are surrounded by other high counts, often indicating economically significant agricultural hubs. These clusters could attract further investment or research to support efficient agricultural practices.

-   **Low-Low (LL)**: Regions with consistently low farm activity may be under-resourced or lack suitable conditions for farming. These clusters present opportunities for development projects or support programs.

-   **High-Low (HL) and Low-High (LH)**: These more complex clusters could indicate regions with unique agricultural characteristics, such as varying terrain, resources, or practices that affect productivity differently from their neighboring areas.

**4. Temporal Trends**: By analyzing changes in farm counts year-over-year, we observed notable shifts in agricultural activity across provinces. For example, some provinces show steady growth in farm activity, while others exhibit declines, potentially due to urbanization or resource constraints. Understanding these shifts is crucial for adaptive resource planning, allowing policymakers to reallocate support dynamically based on emerging patterns.

### **Concluding Insights for Policy and Development**

Our spatial EDA of farm counts across Vietnamese provinces provides a multi-layered view of agricultural distribution and change over time. Key conclusions include:

-   **Global Patterns**: Global Moran’s I suggests slight clustering, but with limited strength. Thus, interventions should focus more on local patterns than overarching national trends.

-   **Local Clustering**: LISA analysis provides actionable insights into specific provinces with significant clustering patterns. For example, High-High (HH) clusters could be prioritized for investment as agricultural hubs, while Low-Low (LL) clusters might benefit from targeted support to foster growth and sustainability.

-   **Yearly Trends**: Observing trends over multiple years highlights areas where agriculture is thriving or declining, offering a basis for long-term planning. For instance, increasing support in declining areas could stabilize agricultural output, while investment in growing regions could maximize returns.

### **Implications for Future Research and Development**

This analysis underscores the value of spatial EDA for informed decision-making, allowing stakeholders to base strategies on data-driven insights. The findings could be further refined through predictive modeling, using machine learning techniques to forecast growth areas or identify emerging clusters based on historical data.

By identifying these spatial patterns and observing trends over time, policymakers, investors, and stakeholders can leverage this knowledge to support targeted, region-specific initiatives for sustainable agricultural development in Vietnam.

# **References**

-   General Statistics Office of Vietnam. (2022). *Achievements of the agriculture industry: A year summation.* Retrieved from <https://www.gso.gov.vn/en/data-and-statistics/2022/03/achievements-of-the-agriculture-industry-a-year-summation/>

-   World Bank. (n.d.). *Agricultural land (% of land area) - Vietnam.* Retrieved October 2024, from <https://data.worldbank.org/indicator/AG.LND.AGRI.ZS?locations=VN>

-   Statista. (2022). *Agriculture in Vietnam - statistics & facts.* Retrieved from <https://www.statista.com/topics/5653/agriculture-in-vietnam/>

-   Anselin, L., Syabri, I., & Kho, Y. (2006). *GeoDa: An introduction to spatial data analysis.* Geographical Analysis, 38(1), 5-22. doi:10.1111/j.0016-7363.2005.00671.x

-   Rey, S. J., & Anselin, L. (2007). *PySAL: A Python library of spatial analytical methods.* In Fischer, M. & Getis, A. (Eds.), *Handbook of Applied Spatial Analysis* (pp. 325-338). Springer. doi:10.1007/978-3-642-03647-7_13

-   Cheng, J., Karambelkar, B., & Xie, Y. (2021). *Leaflet: Create interactive web maps with the JavaScript 'Leaflet' library.* R package version 2.0.4.1. Retrieved from https://cran.r-project.org/web/packages/leaflet/index.html

-   Chang, W., & Borges Ribeiro, B. (2021). *Shiny: Web application framework for R.* R package version 1.7.1. Retrieved from https://cran.r-project.org/web/packages/shiny/index.html

-   Bivand, R. S., Pebesma, E., & Gómez-Rubio, V. (2013). *Applied spatial data analysis with R* (2nd ed.). Springer. doi:10.1007/978-1-4614-7618-4
