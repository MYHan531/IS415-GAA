{
  "hash": "feaf32e1f65dc36976e7c9d817106fe8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 1: Geospatial Data Science with R\"\ntitle-block-banner: true\nauthor: \"Han Ming Yan\"\ndate: 2024-08-19\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## 1.1 Learning Outcome\n\nGeospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this In-Class exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.\n\nBy the end of this In-Class exercise, you should acquire the following competencies:\n\n-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,\n\n-   importing geospatial data by using appropriate functions of **sf** package,\n\n-   importing aspatial data by using appropriate function of **readr** package,\n\n-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,\n\n-   assigning or transforming coordinate systems by using using appropriate *sf* functions,\n\n-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,\n\n-   performing geoprocessing tasks by using appropriate functions of **sf** package,\n\n-   performing data wrangling tasks by using appropriate functions of **dplyr** package and\n\n-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.\n\n## 1.2 Data Acquisition\n\nData are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. In this In-Class exercise, you are required to extract the necessary data sets from the following sources:\n\n-   MPSZ on elearn\n\n### **1.2.1 Extracting the geospatial data sets**\n\nNext, at the `In-Class_Ex01` folder, create a sub-folder called `data`. Then, inside the `data` sub-folder, create two sub-folders and name them `geospatial` and `aspatial` respectively.\n\nPlace `Master Plan 2014 Subzone Boundary (Web)`, `Pre-Schools Location` and `Cycling Path` zipped files into `geospatial` sub-folder and unzipped them. Copy the unzipped files from their respective sub-folders and place them inside `geospatial` sub-folder.\n\n### **1.2.2 Extracting the aspatial data set**\n\nNow, you will extract the downloaded `listing` data file. At `Downloads` folder, cut and paste `listing.csv` into `aspatial` sub-folder.\n\n## **1.3 Getting Started**\n\nTwo R packages will be used. They are:\n\n-   **sf** for importing, managing, and processing geospatial data, and\n\n-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.\n\nTidyverse consists of a family of R packages. The following packages will be used:\n\n-   **readr** for importing csv data,\n\n-   **readxl** for importing Excel worksheet,\n\n-   **tidyr** for manipulating data,\n\n-   **dplyr** for transforming data, and\n\n-   **ggplot2** for visualising data\n\nType the following code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n-   The [`p_load`](https://cran.r-project.org/web/packages/pacman/pacman.pdf) function pf [**pacman**](https://github.com/trinker/pacman) package is used to install and load sf and tidyverse pacages into R environment.\n\n## **1.4 Importing Geospatial Data**\n\nWe will import the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:\n\n```         \n-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,\n\n-   `CyclingPath`, a line feature layer in ESRI shapefile format, and\n\n-   `PreSchool`, a point feature layer in kml file format.\n```\n\n### **1.4.1 Importing polygon feature data in shapefile format**\n\nThe code chunk below uses *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: `dsn` to define the data path and `layer` to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"C:/IS415-GAA/In-Class_Ex/In-Class_Ex01/data\", \n                  layer = \"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\IS415-GAA\\In-Class_Ex\\In-Class_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nThere are a total of 332 multipolygon features and 6 fields in mpsz simple feature data frame. mpsz is in WGS84 projected coordinates systems.\n\n## **1.5 Checking the Content of A Simple Feature Data Frame**\n\nIn this sub-section, you will use different ways to retrieve information related to the content of a simple feature data frame.\n\n### **1.5.1 Working with *st_geometry()***\n\nThe column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column in this case by mpsz\\$geom or mpsz\\[\\[1\\]\\], but the more general way uses *st_geometry()* as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 332 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.8802 1.283859, 103.8802 1.2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.8376 1.295599, 103.8377 1.2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.8341 1.292476, 103.8341 1.2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.7125 1.291625, 103.7126 1.2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.8472 1.297, 103.8473 1.2969...\n```\n\n\n:::\n:::\n\n\n### **1.5.2 Working with glimpse()**\n\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find *glimpse()* of **dplyr**. very handy as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 332\nColumns: 7\n$ SUBZONE_N  <chr> \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  <chr> \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N <chr> \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C <chr> \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((103.8802 1...., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n### **1.5.3 Working with *head()***\n\nSometimes we would like to reveal complete information of a feature object, this is the job of [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R. In this case we will look at the first 5 rows of mpsz\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6537 ymin: 1.216215 xmax: 103.8811 ymax: 1.29742\nGeodetic CRS:  WGS 84\n                SUBZONE_N SUBZONE_C      PLN_AREA_N PLN_AREA_C       REGION_N\n1             MARINA EAST    MESZ01     MARINA EAST         ME CENTRAL REGION\n2        INSTITUTION HILL    RVSZ05    RIVER VALLEY         RV CENTRAL REGION\n3          ROBERTSON QUAY    SRSZ01 SINGAPORE RIVER         SR CENTRAL REGION\n4 JURONG ISLAND AND BUKOM    WISZ01 WESTERN ISLANDS         WI    WEST REGION\n5            FORT CANNING    MUSZ02          MUSEUM         MU CENTRAL REGION\n  REGION_C                       geometry\n1       CR MULTIPOLYGON (((103.8802 1....\n2       CR MULTIPOLYGON (((103.8376 1....\n3       CR MULTIPOLYGON (((103.8341 1....\n4       WR MULTIPOLYGON (((103.7125 1....\n5       CR MULTIPOLYGON (((103.8472 1....\n```\n\n\n:::\n:::\n\n\n## **1.6 Plotting the Geospatial Data**\n\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-Class_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}