[
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-Class Exercise 5: Geographically Weighted Statistics - gwModel methods",
    "section": "",
    "text": "pacman::p_load(tmap, sf, tidyverse, spdep, knitr, GWmodel, dplyr)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#import-hunan_shapefile",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#import-hunan_shapefile",
    "title": "In-Class Exercise 5: Geographically Weighted Statistics - gwModel methods",
    "section": "2.1 Import hunan_shapefile",
    "text": "2.1 Import hunan_shapefile\n\nhunan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#import-hunan2012.csv",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#import-hunan2012.csv",
    "title": "In-Class Exercise 5: Geographically Weighted Statistics - gwModel methods",
    "section": "2.2 Import hunan2012.csv",
    "text": "2.2 Import hunan2012.csv\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#perform-relational-joins-for-the-2-hunan-data-frames",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#perform-relational-joins-for-the-2-hunan-data-frames",
    "title": "In-Class Exercise 5: Geographically Weighted Statistics - gwModel methods",
    "section": "2.3 Perform Relational Joins for the 2 Hunan data frames",
    "text": "2.3 Perform Relational Joins for the 2 Hunan data frames\n\n# all of hunan_sf plus any similar colnames from hunan2012\nhunan_sf &lt;- left_join(hunan_sf,hunan2012) %&gt;% \n  dplyr::select(1:3, 7, 15, 16, 31, 32) # only see these columns from the hunan_sf\n\n\n2.3.1 Save data into the rds folder\nWe do this so that we do not need to re-run the previous codes, to keep the derived data in a .rds file\n\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\") # keep in tibble format\n\n\n\n2.3.2 To read back the data, (if we do not have it in our environment yet)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#determine-adaptive-bandwidth",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#determine-adaptive-bandwidth",
    "title": "In-Class Exercise 5: Geographically Weighted Statistics - gwModel methods",
    "section": "4.1 Determine adaptive bandwidth",
    "text": "4.1 Determine adaptive bandwidth\n\nCross-ValidationAkaike information criterion (AIC)\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"CV\",\n                 adaptive = TRUE, # false means you are calculating fixed distance\n                 kernel = \"bisquare\",\n                 longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n# the recommeneded number of Geo measures is 22 as seen in the output\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"AIC\",\n                 adaptive = TRUE, # false means you are calculating fixed distance\n                 kernel = \"bisquare\",\n                 longlat = T) # impt: in the package, it will transform your data into great circle, in kilometres, NOT metre\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#computing-geographically-weighted-summary-statistics",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#computing-geographically-weighted-summary-statistics",
    "title": "In-Class Exercise 5: Geographically Weighted Statistics - gwModel methods",
    "section": "4.2 Computing geographically weighted summary statistics",
    "text": "4.2 Computing geographically weighted summary statistics\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",                \n               bw = bw_AIC,                \n               kernel = \"bisquare\",                \n               adaptive = TRUE,                \n               longlat = T)\n# fast as we only have 88 rows of data\n# the one that we need in gwstat is the SDF (SpatialPolygonsDataFrame)\n\n\ngwstat[[\"SDF\"]]\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 88 \nextent      : 108.7831, 114.2544, 24.6342, 30.12812  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 5\nnames       :         GDPPC_LM,        GDPPC_LSD,       GDPPC_LVar,         GDPPC_LSKe,         GDPPC_LCV \nmin values  : 13688.6986033259, 4282.59917616925, 18340655.7037255, -0.215059890053628, 0.200050258645349 \nmax values  : 49005.8382943034, 22568.8411539952, 509352591.034267,    3.7525953469342, 0.801815253056721 \n\n# view(gwstat[[\"SDF\"]]@data) # this one includes itself unlike the previous sp data"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#preparing-the-output-data",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#preparing-the-output-data",
    "title": "In-Class Exercise 5: Geographically Weighted Statistics - gwModel methods",
    "section": "4.3 Preparing the output data",
    "text": "4.3 Preparing the output data\nThe Code chunk below is used to extract SDf data table from gwss object output from gwss(). It will be converted to a data frame by using base::as.data.frame\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n# Next we will use cbind() to append the newly derived data.frame onto hunan_sf sf data.frame\nhunan_gstat &lt;-  cbind(hunan_sf, gwstat_df)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#visualising-geographically-weighted-summary-statistics",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#visualising-geographically-weighted-summary-statistics",
    "title": "In-Class Exercise 5: Geographically Weighted Statistics - gwModel methods",
    "section": "4.4 Visualising geographically weighted summary statistics",
    "text": "4.4 Visualising geographically weighted summary statistics\n\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\", n=5, style = \"quantile\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50,\n            legend.width = 1.50,\n            frame = TRUE)\n\n\n\n\n\n\n\n#interactive view, avoid as much as possible, it might hang the browser as the memory is too high when there is too many interactive views, even 2 of them can crash the browser and RStudios"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#determine-fixed-bandwidth",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#determine-fixed-bandwidth",
    "title": "In-Class Exercise 5: Geographically Weighted Statistics - gwModel methods",
    "section": "5.1 Determine fixed bandwidth",
    "text": "5.1 Determine fixed bandwidth\nto do so, it is the same as the adaptive bandwidth except that the adaptive condition will now be FALSE.\n\nCross-ValidationAkaike information criterion (AIC)\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"CV\",\n                 adaptive = FALSE, # false means you are calculating fixed distance, TRUE means you are calculating adaptive distances\n                 kernel = \"bisquare\",\n                 longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n# 76.29123 CV score: 13442844676, it gave 2 different distances to the AIC, quite a big difference compared to the adaptive bandwidth\n\n# there is no right or wrong answer, up to you to choose. but must visualise the result.\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"AIC\",\n                 adaptive = FALSE,\n                 kernel = \"bisquare\",\n                 longlat = T) # impt: in the package, it will transform your data into great circle, in kilometres, NOT metre\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n# 160.5517 AICc value: 1919.391"
  }
]